rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/school_data/$(schoolId)/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/school_data/$(schoolId)/users/$(request.auth.uid)).data.role in ['admin', 'teacher'];
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Test connection (development only - remove in production)
    match /test_connection/{document} {
      allow read, write: if true;
    }
    
    // Global settings - read by all authenticated users, write by admin only
    match /global_settings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Events - read by all authenticated users, write by teachers/admin
    match /events/{document} {
      allow read: if isAuthenticated();
      allow write: if isTeacher();
    }
    
    // Notifications - users can read their own notifications
    match /notifications/{userId}/{notification} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isTeacher();
    }
    
    // School data - scoped by school ID
    match /school_data/{schoolId} {
      
      // Users collection
      match /users/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAdmin();
        allow update: if isAdmin() || isOwner(userId);
        allow delete: if isAdmin();
      }
      
      // Students collection
      match /students/{studentId} {
        allow read: if isAuthenticated();
        allow write: if isTeacher();
      }
      
      // Attendance logs
      match /attendance_logs/{attendanceId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated(); // Any authenticated user can mark attendance
        allow update, delete: if isTeacher();
      }
      
      // Payments
      match /payments/{paymentId} {
        allow read: if isAuthenticated();
        allow write: if isTeacher();
      }
      
      // Discipline records
      match /discipline/{disciplineId} {
        allow read: if isAuthenticated();
        allow write: if isTeacher();
      }
      
      // Sync logs - for debugging and audit trail
      match /sync_logs/{logId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAdmin();
      }
      
      // School metadata
      match /school_data/{document} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
    }
    
    // Audit logs - admin only
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Audit logs are immutable
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// PRODUCTION NOTES:
// 1. Remove test_connection rule before deploying to production
// 2. Implement proper user authentication with Firebase Auth
// 3. Ensure all users have a role field in their user document
// 4. Consider adding rate limiting for write operations
// 5. Add validation rules for data structure and types
// 6. Monitor Firestore usage and set up billing alerts